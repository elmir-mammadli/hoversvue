"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const sdk_1 = require("@directus/sdk");
const command_1 = require("../../../core/command");
const exceptions_1 = require("../../../core/exceptions");
const storage_1 = require("../../../core/sdk/storage");
exports.default = (0, command_1.command)({
    group: 'instance',
    parameters: '[name]',
    description: 'Disconnects from a Directus instance',
    usage: `
			**From default instance**

			\`\`\`
			$ $0 instance disconnect
			\`\`\`

			**From a named instance**

			\`\`\`
			$ $0 instance disconnect dev
			\`\`\`
		`,
    documentation: `
			Tries to logout from the instance and erases the associated
			data from the system configuration file. If logout fails it
			will still remove the associated data from the configuration
			file.

			*~/.directus/directus.yml*
		`,
    hints: ['disconnect', 'dc', 'project disconnect', 'project disconnect', 'server disconnect', 'server disconnect'],
    options: function (builder) {
        return builder.positional('name', {
            type: 'string',
            default: 'default',
        });
    },
}, async function ({ output, config }, params) {
    if (!(params.name in config.system.data.instances)) {
        throw new exceptions_1.CLIRuntimeError(`Unknown instance: ${params.name}`);
    }
    const instance = config.system.data.instances[params.name];
    try {
        const sdk = new sdk_1.Directus(instance.endpoint, {
            storage: new storage_1.InstanceStorage(params.name, config.system),
        });
        await sdk.auth.logout();
    }
    catch {
        // pass
    }
    delete config.system.data.instances[params.name];
    config.system.save();
    await output.compose(async (ui) => {
        await ui.wrap((ui) => ui.line(`Successfully disconnected from ${chalk_1.default.bold(params.name)}`), 1);
    });
    return {
        success: true,
    };
});
