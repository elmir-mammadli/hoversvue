"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const command_1 = require("../../../core/command");
const pretty_ms_1 = __importDefault(require("pretty-ms"));
exports.default = (0, command_1.command)({
    group: 'instance',
    description: "Show instance's information",
    usage: `
			\`\`\`
			$ $0 instance info
			\`\`\`
		`,
    documentation: `
			Show information about the selected instance.
		`,
    features: {
        sdk: true,
    },
    hints: ['inf', 'info', 'project info'],
}, async function ({ output, sdk }, _params) {
    const info = (await sdk.server.info()); // TODO: remove cast when fixed in the SDK
    const unavailable = chalk_1.default.gray.italic('Unavailable');
    const { directus, node, os, project } = info;
    await output.compose(async (ui) => {
        await ui.wrap(async (ui) => {
            if (os) {
                await ui.skip();
                await ui.header('Server');
                await ui.skip();
                await ui.table([
                    [chalk_1.default.bold('Type'), os?.type || unavailable],
                    [chalk_1.default.bold('Version'), os?.version || unavailable],
                    [chalk_1.default.bold('Uptime'), (0, pretty_ms_1.default)((os?.uptime || 0) * 1000)],
                    [chalk_1.default.bold('Memory'), os?.totalmem || unavailable],
                ], {
                    alignments: ['right', 'left'],
                });
            }
            if (node) {
                await ui.skip();
                await ui.header('Node');
                await ui.skip();
                await ui.table([
                    [chalk_1.default.bold('Version'), node?.version || unavailable],
                    [chalk_1.default.bold('Uptime'), (0, pretty_ms_1.default)((node?.uptime || 0) * 1000)],
                ], {
                    alignments: ['right', 'left'],
                });
            }
            if (project) {
                await ui.skip();
                await ui.header('Project');
                await ui.skip();
                await ui.table([
                    [chalk_1.default.bold('Name'), project?.project_name || unavailable],
                    [chalk_1.default.bold('Note'), project?.public_note || unavailable],
                ], {
                    alignments: ['right', 'left'],
                });
            }
            if (directus) {
                await ui.skip();
                await ui.header('Directus');
                await ui.skip();
                await ui.table([[chalk_1.default.bold('Version'), directus?.version || unavailable]], {
                    alignments: ['right', 'left'],
                });
            }
        }, 1);
    });
    return info;
});
