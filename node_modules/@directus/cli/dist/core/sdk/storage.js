"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceStorage = void 0;
class InstanceStorage {
    constructor(name, config, prefix = '') {
        this.name = name;
        this.config = config;
        this.prefix = prefix;
    }
    get auth_token() {
        return this.get('auth_token');
    }
    set auth_token(value) {
        if (value === null) {
            this.delete('auth_token');
        }
        else {
            this.set('auth_token', value);
        }
    }
    get auth_expires() {
        const value = this.get('auth_expires');
        if (value === null) {
            return null;
        }
        return parseInt(value);
    }
    set auth_expires(value) {
        if (value === null) {
            this.delete('auth_expires');
        }
        else {
            this.set('auth_expires', value.toString());
        }
    }
    get auth_expires_at() {
        const value = this.get('auth_expires_at');
        if (value === null) {
            return null;
        }
        return parseInt(value);
    }
    set auth_expires_at(value) {
        if (value === null) {
            this.delete('auth_expires_at');
        }
        else {
            this.set('auth_expires_at', value.toString());
        }
    }
    get auth_refresh_token() {
        return this.get('auth_refresh_token');
    }
    set auth_refresh_token(value) {
        if (value === null) {
            this.delete('auth_refresh_token');
        }
        else {
            this.set('auth_refresh_token', value);
        }
    }
    get(key) {
        const k = this.key(key);
        if (!(this.name in this.config.data.instances)) {
            return null;
        }
        if (!this.config.data.instances[this.name].data) {
            return null;
        }
        if (!(k in this.config.data.instances[this.name].data)) {
            return null;
        }
        return this.config.data.instances[this.name].data[k];
    }
    set(key, value) {
        const k = this.key(key);
        if (!(this.name in this.config.data.instances)) {
            this.config.data.instances[this.name] = {
                auth: 'public',
                endpoint: '',
                data: {},
            };
        }
        if (!this.config.data.instances[this.name].data) {
            this.config.data.instances[this.name].data = {};
        }
        this.config.data.instances[this.name].data[k] = value;
        return value;
    }
    delete(key) {
        const k = this.key(key);
        const value = this.get(key);
        if (!(this.name in this.config.data.instances)) {
            return value;
        }
        if (!this.config.data.instances[this.name].data) {
            return value;
        }
        if (!(k in this.config.data.instances[this.name].data)) {
            return value;
        }
        delete this.config.data.instances[this.name].data[k];
        return value;
    }
    key(name) {
        return `${this.prefix}${name}`;
    }
}
exports.InstanceStorage = InstanceStorage;
