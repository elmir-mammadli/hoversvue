import { IConfiguration, IBaseConfiguration, IStaticConfiguration } from '../config';
export declare type BaseConfigurationOptions<T> = {
    defaults: T;
};
export declare class BaseConfiguration<T extends Record<string, unknown> = any, C extends BaseConfigurationOptions<T> = BaseConfigurationOptions<T>> implements IBaseConfiguration<T> {
    protected _data?: T;
    protected _path?: string;
    protected _options: C;
    get path(): string | undefined;
    get data(): T;
    constructor(options: C);
}
export declare type StaticConfigurationOptions<T> = BaseConfigurationOptions<T> & {
    name: string;
    files: string[];
};
export declare class StaticConfiguration<T extends Record<string, unknown> = any> extends BaseConfiguration<T, StaticConfigurationOptions<T>> implements IStaticConfiguration<T> {
    private engine;
    constructor(options: StaticConfigurationOptions<T>);
    private loadJson;
    private loadYaml;
    private transform;
}
export declare type ConfigurationOptions<T> = BaseConfigurationOptions<T> & {
    name: string;
    directory: string;
    file: string;
};
export declare class YamlConfiguration<T extends Record<string, unknown> = any> extends BaseConfiguration<T, ConfigurationOptions<T>> implements IConfiguration<T> {
    constructor(options: ConfigurationOptions<T>);
    save(): void;
}
//# sourceMappingURL=config.d.ts.map