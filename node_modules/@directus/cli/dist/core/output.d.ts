/// <reference types="node" />
import { IOptions } from '../options';
import { IOutput, IUIComposer, IOutputFormat } from '../output';
import { CLIError } from './exceptions';
import { CommandHelp, GeneralHelp } from '../help';
import { WriteStream } from 'fs';
export declare type OutputOptions = {
    format: string;
};
export declare class Output implements IOutput {
    private options;
    private formats;
    private _text;
    private _help?;
    private _value?;
    private _errors;
    constructor(options: IOptions);
    help(help: GeneralHelp | CommandHelp): Promise<void>;
    text(text: string): Promise<void>;
    value<T>(value: T): Promise<void>;
    error(err: CLIError): Promise<void>;
    flush(stream: WriteStream): Promise<void>;
    registerFormat(name: string, format: IOutputFormat): void;
    compose(builder: (builder: IUIComposer) => Promise<void>): Promise<void>;
    getFormatter(): IOutputFormat;
    getOptions(options?: Partial<OutputOptions>): OutputOptions;
}
//# sourceMappingURL=output.d.ts.map