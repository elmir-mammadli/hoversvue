"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonOutputFormat = exports.DefaultTheme = void 0;
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("../../utils");
const cli_highlight_1 = __importStar(require("cli-highlight"));
exports.DefaultTheme = {
    ...cli_highlight_1.DEFAULT_THEME,
    string: chalk_1.default.reset.rgb(234, 118, 116),
};
class JsonOutputFormat {
    constructor(theme = exports.DefaultTheme) {
        this.theme = theme;
    }
    registerOptions(options) {
        return options
            .option('highlight', {
            type: 'boolean',
            default: utils_1.tty,
            description: 'Whether or not to highlight the output',
            implies: ['pretty'],
        })
            .option('pretty', {
            type: 'boolean',
            default: utils_1.tty,
            description: 'Whether or not to format the output',
        });
    }
    async value(value, options) {
        let formatted = JSON.stringify(value, null, options.pretty || options.highlight ? 2 : 0) ?? 'undefined';
        if (options.highlight) {
            formatted = (0, cli_highlight_1.default)(formatted, {
                ignoreIllegals: true,
                language: 'json',
                theme: this.theme,
            });
        }
        return formatted;
    }
    async format(data, options) {
        return await this.value(data.value, options);
    }
}
exports.JsonOutputFormat = JsonOutputFormat;
