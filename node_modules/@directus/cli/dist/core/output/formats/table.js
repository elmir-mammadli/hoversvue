"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableOutputFormat = void 0;
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const ui_1 = require("../ui");
class TableOutputFormat {
    registerOptions(options) {
        return options
            .option('ansi', {
            type: 'boolean',
            default: true,
            description: 'Whether or not to output ansi codes',
        })
            .option('stacktrace', {
            type: 'boolean',
            default: process.env.DEBUG ? true : false,
            description: 'Display extended information on error',
        })
            .option('table', {
            type: 'string',
            choices: ['minimal', 'compact', 'markdown'],
            default: 'compact',
            description: 'The table layout to use when displaying data',
        });
    }
    async text(text, options) {
        if (!options.ansi) {
            text = (0, strip_ansi_1.default)(text);
        }
        return text;
    }
    async error(error, options) {
        const builder = new ui_1.UIBuilder(2, ui_1.FullTerminalWidth);
        await builder.error(error, {
            stacktrace: options.stacktrace,
        });
        return await this.text(await builder.get(), options);
    }
    async format(data, options) {
        const output = await Promise.all([
            ...data.text.map((line) => this.text(line, options)),
            ...data.errors.map((error) => this.error(error, options)),
        ]);
        // values not displayed on human interface
        return output.join('\n');
    }
}
exports.TableOutputFormat = TableOutputFormat;
