import chalk from 'chalk';
import { IUIComposer, OutputColumn, Style, TableOptions, TableStyle, TextLayoutOptions } from '../../output';
export declare const DefaultIndentSize = 2;
export declare const FullTerminalWidth: number;
export declare const DefaultTerminalWidth: number;
export declare const palette: {
    header: chalk.Chalk;
    quote: chalk.Chalk;
};
export declare class UIBuilder implements IUIComposer {
    private lines;
    private indentSize;
    private indentLevel;
    private terminalWidth;
    private markdownRenderer;
    constructor(indentSize?: number, terminalWidth?: number, indentLevel?: number);
    configure(opts: {
        indent?: number;
        width?: number;
    }): void;
    private defaultTextOptions;
    private makeLayout;
    text(text: string, options?: TextLayoutOptions): Promise<void>;
    rows(data: OutputColumn[][]): Promise<void>;
    header(name: string, style?: (text: string) => string): Promise<void>;
    table(values: string[][], options?: TableOptions): Promise<void>;
    skip(lines?: number): Promise<void>;
    line(value: string): Promise<void>;
    markdown(text: string): string;
    figlet(text: string): Promise<void>;
    section(name: string, wrapper?: (builder: IUIComposer) => Promise<void>, style?: Style): Promise<void>;
    wrap(build: (builder: IUIComposer) => Promise<void>, verticalPadding?: number): Promise<void>;
    error(err: Error, options?: {
        title?: string;
        stacktrace?: boolean;
    }): Promise<void>;
    json<T>(value: T, style?: TableStyle): Promise<void>;
    private jsonArray;
    private jsonHighlight;
    get(): Promise<string>;
    clear(): Promise<void>;
}
//# sourceMappingURL=ui.d.ts.map