"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.project = exports.system = void 0;
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const config_1 = require("../config");
exports.system = new config_1.YamlConfiguration({
    name: 'directus',
    directory: path.join(os.homedir(), '.directus'),
    file: 'directus.yml',
    defaults: {
        instances: {},
    },
});
exports.project = new config_1.StaticConfiguration({
    name: 'directus',
    files: [
        '.directus.yml',
        '.directus.yaml',
        '.directus.json',
        '.directus.js',
        '.directusrc',
        '.directusrc.yml',
        '.directusrc.yaml',
        '.directusrc.json',
        '.directusrc.json5',
        '.directusrc.js',
        'directus.config.yml',
        'directus.config.yaml',
        'directus.config.json',
        'directus.config.json5',
        'directus.config.js',
    ],
    defaults: {
        instance: 'default' in exports.system.data.instances ? 'default' : undefined,
        experimental: {
            cli: {
                community_extensions: !!process.env.EXPERIMENTAL_CLI_COMMUNITY_EXTENSIONS,
                typescript: {
                    enabled: false,
                    tsconfig: './tsconfig.json',
                    source: undefined,
                },
            },
        },
    },
});
exports.default = (toolbox) => {
    toolbox.config = {
        system: exports.system,
        project: exports.project,
    };
};
