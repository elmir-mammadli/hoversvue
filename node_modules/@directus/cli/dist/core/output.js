"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Output = void 0;
const utils_1 = require("./utils");
const table_1 = require("./output/formats/table");
const ui_1 = require("./output/ui");
const exceptions_1 = require("./exceptions");
class Output {
    constructor(options) {
        this.formats = {
            table: new table_1.TableOutputFormat(),
        };
        this._text = [];
        this._errors = [];
        this.options = options;
        this.options.feature('output', (builder, _, raw) => {
            builder.option('format', {
                description: 'The output format',
                default: 'table',
                choices: [...Object.keys(this.formats)],
            });
            const explicitFormat = raw.format ?? 'table';
            Object.entries(this.formats).forEach(([name, format]) => {
                if (name === explicitFormat) {
                    format.registerOptions(builder);
                }
            });
            if (explicitFormat != 'table' && !(explicitFormat in this.formats)) {
                this.formats['table'].registerOptions(builder);
                throw new exceptions_1.CLIRuntimeError(`Unknown output format: ${explicitFormat}`);
            }
        });
    }
    async help(help) {
        this._help = help;
    }
    async text(text) {
        this._text.push(text);
    }
    async value(value) {
        this._value = value;
    }
    async error(err) {
        this._errors.push({
            code: err.code,
            name: err.name,
            message: err.message,
            stack: err.stack,
        });
    }
    async flush(stream) {
        stream.write(await this.getFormatter().format({
            value: {
                result: this._value,
                help: this._help,
                errors: this._errors.length > 0 ? this._errors : undefined,
            },
            help: this._help,
            text: this._text,
            errors: this._errors,
        }, this.getOptions()));
        this._help = undefined;
        this._value = undefined;
        this._errors = [];
        this._text = [];
    }
    registerFormat(name, format) {
        this.formats[name] = format;
    }
    async compose(builder) {
        const outputBuilder = new ui_1.UIBuilder();
        await builder(outputBuilder);
        await this.text(await outputBuilder.get());
    }
    getFormatter() {
        const { format } = this.getOptions();
        return this.formats[format] ?? this.formats['table'];
    }
    getOptions(options) {
        const opts = this.options.values();
        return (0, utils_1.defaults)(options, {
            ...opts,
            format: opts.format ?? 'table',
        });
    }
}
exports.Output = Output;
