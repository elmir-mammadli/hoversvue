"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YamlConfiguration = exports.StaticConfiguration = exports.BaseConfiguration = void 0;
const path = __importStar(require("path"));
const yaml = __importStar(require("js-yaml"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const json5_1 = __importDefault(require("json5"));
const liquidjs_1 = require("liquidjs");
const cosmiconfig_1 = require("cosmiconfig");
class BaseConfiguration {
    constructor(options) {
        this._options = options;
    }
    get path() {
        return this._path;
    }
    get data() {
        return (this._data ||
            (this._data = {
                ...this._options.defaults,
            }));
    }
}
exports.BaseConfiguration = BaseConfiguration;
class StaticConfiguration extends BaseConfiguration {
    constructor(options) {
        super(options);
        this.engine = new liquidjs_1.Liquid();
        const explorer = (0, cosmiconfig_1.cosmiconfigSync)(this._options.name, {
            searchPlaces: this._options.files,
            loaders: {
                noExt: this.loadJson.bind(this),
                '.js': cosmiconfig_1.defaultLoaders['.js'],
                '.json': this.loadJson.bind(this),
                '.json5': this.loadJson.bind(this),
                '.yml': this.loadYaml.bind(this),
                '.yaml': this.loadYaml.bind(this),
            },
        });
        const result = explorer.search();
        if (result) {
            this._data = result.config;
            this._path = result.filepath;
        }
    }
    loadJson(_, content) {
        return json5_1.default.parse(this.transform(content));
    }
    loadYaml(_, content) {
        return yaml.load(this.transform(content));
    }
    transform(content) {
        return this.engine.parseAndRenderSync(content, {
            env: process.env,
        });
    }
}
exports.StaticConfiguration = StaticConfiguration;
class YamlConfiguration extends BaseConfiguration {
    constructor(options) {
        super(options);
        this._path = path.join(options.directory, options.file);
        fs_extra_1.default.ensureDirSync(options.directory);
        if (!fs_extra_1.default.existsSync(this._path)) {
            fs_extra_1.default.outputFileSync(this._path, yaml.dump(options.defaults, {
                forceQuotes: true,
            }));
        }
        this._data = yaml.load(fs_extra_1.default.readFileSync(this._path).toString(), {
            filename: this._path,
        });
    }
    save() {
        fs_extra_1.default.outputFileSync(this._path, yaml.dump(this.data, {
            forceQuotes: true,
        }));
    }
}
exports.YamlConfiguration = YamlConfiguration;
